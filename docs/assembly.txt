
This document describe the syntax of the assembly files (.cs8)

# Instructions



## add

add <Src:NN>, %v<Dst:X>			(7XNN)
add %v<Src:Y>, %v<Dst:X>		(8XY4)
add %v<Src:X>, %i			(FX1E)

## and

and %v<Src:Y>, %v<Dst:X>		(8XY2)

## bcd

bcd %v<Src:X>				(FX33)

## call

call <Addr:NNN>				(2NNN)

## cls

cls					(00E0)

## draw

draw %v<X:X>, %v<Y:Y>, <H:N>		(DXYN)

## fspr

fspr %v<Src:X>				(FX29)

## jmp

jmp <Addr:NNN>				(1NNN)
jmp <Addr:NNN>(%v0)			(BNNN)

## mov

mov <Src:NN>, %v<Dst:X>			(6XNN)
mov %v<Src:Y>, %v<Dst:X>		(8XY0)
mov <Addr:NNN>, %i			(ANNN)
mov %dt, %v<Dst:X>			(FX07)
mov %v<Src:X>, %dt			(FX15)
mov %v<Src:X>, %st			(FX18)

## movm

movm %v<Src:X>, %i			(FX55)
movm %i, %v<Dst:X>			(FX65)

## or

or %v<Src:Y>, %v<Dst:X>			(8XY1)

## rand

rand <Mask:NN>, %v<Dst:X>		(CXNN)

## ret

ret					(00EE)

## shl

shl %v<Src:Y>, %v<Dst:X>		(8XYE)

## shr

shr %v<Src:Y>, %v<Dst:X>		(8XY6)

## skp{cc}

cc: condition code (e or n)
skpe <Y:NN>, %v<X:X>			(3XNN)
skpe %v<Y:Y>, %v<X:X>			(5XY0)
skpn <Y:NN>, %v<X:X>			(4XNN)
skpn %v<Y:Y>, %v<X:X>			(9XY0)

## skpk{cc}

cc: condition code (p or n)
skpkp %v<K:X>				(EX9E)
skpkn %v<K:X>				(EXA1)

## sub

sub %v<Src:Y>, %v<Dst:X>		(8XY5)

## subn

subn %v<Src:Y>, %v<Dst:X>		(8XY7)

## sys

sys <Addr:NNN>				(0NNN)

## waitk

waitk %v<Dst:X>				(FX0A)

## xor

xor %v<Src:Y>, %v<Dst:X>		(8XY3)



# Directives



## .align <nbytes>

Make the next data aligned correctly.
Advance the location counter until it's a multiple of nbytes.
Pad with 0.

## .byte <uint>

Write 1 byte of data

## .equ <name>, <value>

Constant definition.
When using <name> as an operand, get replaced by <value>

## .globl <symbol>

Make a symbol visible to other compilation units.
Otherwhise only visible in the current file.
Can be anywhere before or after the symbol definition

## .size <symbol>, <size>

Size in bytes of the data associacted with a symbol.
For a function, it's the size of the whole code.
For a variable, it's the space it takes.
Can be anywhere before or after the symbol definition

## .type <symbol>, @<type>

Set the type of a symbol. Can be any of these:
- function
- object (variables)
- notype
Default is notype
Can be anywhere before or after the synbol definition

## .word <uint>

Write 2 bytes of data

## .zero <n>

Write n bytes of 0



# File Syntax

file: <declaration>*

declaration: \s* (<ins> | <dir> | <comment> | <symbol>)


ins: @id \s+ @list<<op>, ','>

dir: '.' @id \s+ (dir_align | dir_byte | dir_equ | dir_globl
     	     	 	    | dir_size | dir_type | dir_word | dir_zero)


dir_byte: \s+ op_imm // (without symbol)

dir_equ: \s+ @id \s? , \s? op_imm // (without symbol)

dir_globl: \s+ @id

dir_size: \s+ @id \s? , \s? op_imm // (without symbol)

dir_type: \s+ @id \s? , \s? '@' ('function' | 'object')

dir_word: \s+ op_imm // (without symbol)

dir_zero: \s+ op_imm // (without symbol)

comment: '#' .* '\n'

symbol: @id ':'


op:  <op_imm>
   | <op_reg>
   | <op_indirect_off>


op_imm: @int10
      | 0x@int16
      | 0@int8
      | 0b@int2
      | @id  //symbol

op_reg: '%' @id

op_indirect_off: <op_imm> '(' <op_reg> ')'


Remember: All symbols have a limited size of 64
