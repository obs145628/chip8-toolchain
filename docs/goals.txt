
Everything written in C, no extern lib, except SDL for the emulator GUI.
Some parts written in other languages (C++ / Rust), but because they are extern to this project. (generic, used also by other projects I have)


- Write an assembler: takes my own `.c8s` files and generate `.c8o` files (object files)
  Use my own assembly format and directives
  Use my own obj format
- Write a linker: takes many `.c8o` files and create `.c8elf` file
  Similar idea than elf file for GBA devkitARM: binary, containing all debug and symbol infos
  Use my own elf format
- Write objdump: Read `.c8o` and `.c8elf`, and display print all code with symbold
- Write a rombuilder: take a `.c8elf`, strip all debug/symbol infos to generate a valid CHIP-8 ROM.
- Write an emulator: load CHIP-8 ROMS, or `.c8elf` file, and execute it.
  Mode CLI (simply run it, no display/sound, can have debug infos)
  Mode GUI with SDL

- Write ODB (Obs Debugger), and make the emulator compatible with it.

Compiler:
- Write backend for irint3a that generate `.c8s` file
- Add option to add native functions to lanexpr, so that I can run assembly written funs.


Other Ideas (not sure I am going to do it yet, depends how the project and Covid-19 evolve):

- Add debug infos to lanexpr, and to ODB, so that I can debug using the lanexpr code.
- Build a JIT for the emulator, that emit x64 code.




Libraries:

# oc8_is

- Encoder: encode ins to binary from ins struct
- Decoder: decode ins to ins struct from binary

# oc8_emu: (oc8_is)

Emulate the CHIP-8 CPU and run instructions

# oc8_as : (oc8_is, oc8_obj, oc8_smap)

- API to build asm struct
- Reader: parse `.c8s` files and use API above to build C8S struct
- Printer: Generate string (.c8s format) from the C8S struct,
  that can be parsed again with the reader
- Assembler: build obj struct from asm struct

# oc8_obj

- API to build obj struct
- BinReader: Read binary `.c8o` file and build obj struct
- BinWriter: Write binary `.c8o` file from obj struct
- Printer: Generate human-readable string from obj struct.

# oc8_ld: (oc8_obj)



# oc8_smap

Basic implementation of a map<string, size_t>.
Implementation based on linkled lists, will try to do best later.
Used by many libraries that need symbol tables.
The val size_t can store any pointer, and is often used as such
